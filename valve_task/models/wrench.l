;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass wrench-object
  :super cascaded-link
  :slots (sensors
         wrench-length
         ))
(defmethod wrench-object
  (:init
   (&optional (size 200) &rest args &key (name "wrench") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (blink0
                 )
     (send-super* :init :name name args)
     (send self :set-val `wrench-length size)
     ;; definition of link

     ;; definition of :tray-bodyset2
     (setq wrench-shaft-body (list (make-cube size 20 10)))
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies wrench-shaft-body :name :panel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :wrench
     (setq wrench-shaft (make-cascoords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-shaft"))
     (send blink0 :assoc wrench-shaft)
     (setq wrench-end (make-cascoords :pos (float-vector (/ size -2) 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-end"))
     (send blink0 :assoc wrench-end)
     (setq wrench-head (make-cascoords :pos (float-vector (/ size 2) 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-head"))
     (send blink0 :assoc wrench-head)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:wrench-shaft (&rest args) (forward-message-to wrench-shaft args))
  (:wrench-end (&rest args) (forward-message-to wrench-end args))
  (:wrench-head (&rest args) (forward-message-to wrench-head args))
  ;; (:length () (slot-value self `wrench-length))
  )

(defun wrench (&rest args) (instance* wrench-object :init args))
