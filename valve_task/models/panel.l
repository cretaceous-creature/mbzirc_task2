;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass panel-object
  :super cascaded-link
  :slots (sensors
         hook0 hook1 hook2 hook3 hook4 hook5
         ))
(defmethod panel-object
  (:init
   (&optional (x 40) (y 0) &rest args &key (name "panel") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (panel-body
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :tray-bodyset2
     (setq panel-body
           (list
            ;; main panel
            (make-cube 10 1000 750)
            ;; wrench hooks
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 200 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 250 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 300 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 350 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 400 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            (send (make-cylinder 10 10) :transform (make-coords :pos (float-vector 10 450 225) :rot (rpy-matrix 0 (/ pi -2) 0)))
            ;; valve shaft base 
            (send (make-cylinder 80 20) :transform (make-coords :pos (float-vector 25 -155 0) :rot (rpy-matrix 0 (/ pi -2) 0)))
            ;; valve shaft
            (send (make-cube 80 13.5 13.5) :transform (make-coords :pos (float-vector 65 -155 0)))
            ))
     (dolist (b (cdr panel-body)) (send (car panel-body) :assoc b))
     (send (elt panel-body 0) :set-color :brown)   
     (send (elt panel-body 1) :set-color :white)   
     (send (elt panel-body 2) :set-color :white)   
     (send (elt panel-body 3) :set-color :white)   
     (send (elt panel-body 4) :set-color :white)   
     (send (elt panel-body 5) :set-color :white)   
     (send (elt panel-body 6) :set-color :white)   
     (send (elt panel-body 7) :set-color :white)
     (send (elt panel-body 8) :set-color :grey)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies panel-body :name :panel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of wrench locations
     (setq wrench-hook0 (make-cascoords :pos (float-vector 10 200 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook0"))
     (send blink0 :assoc wrench-hook0)
     (setq wrench-hook1 (make-cascoords :pos (float-vector 10 250 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook1"))
     (send blink0 :assoc wrench-hook1)
     (setq wrench-hook2 (make-cascoords :pos (float-vector 10 300 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook2"))
     (send blink0 :assoc wrench-hook2)
     (setq wrench-hook3 (make-cascoords :pos (float-vector 10 350 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook3"))
     (send blink0 :assoc wrench-hook3)
     (setq wrench-hook4 (make-cascoords :pos (float-vector 10 400 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook4"))
     (send blink0 :assoc wrench-hook4)
     (setq wrench-hook5 (make-cascoords :pos (float-vector 10 450 225) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":wrench-hook5"))
     (send blink0 :assoc wrench-hook5)
     (setq shaft (make-cascoords :pos (float-vector 25 -155 0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":shaft"))
     (send blink0 :assoc shaft)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)
     
     self))

  (:wrench-hook0 (&rest args) (forward-message-to wrench-hook0 args))      
  (:wrench-hook1 (&rest args) (forward-message-to wrench-hook1 args))      
  (:wrench-hook2 (&rest args) (forward-message-to wrench-hook2 args))      
  (:wrench-hook3 (&rest args) (forward-message-to wrench-hook3 args))      
  (:wrench-hook4 (&rest args) (forward-message-to wrench-hook4 args))      
  (:wrench-hook5 (&rest args) (forward-message-to wrench-hook5 args))      
  (:wrench-hook6 (&rest args) (forward-message-to wrench-hook6 args))      
  (:shaft (&rest args) (forward-message-to shaft args))      
  )

(defun panel (&rest args) (instance* panel-object :init args))
